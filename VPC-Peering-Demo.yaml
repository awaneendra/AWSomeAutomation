AWSTemplateFormatVersion: '2010-09-09'
Description: 'CFT to create bastion and application VPCs with VPC peering for secure access'

Parameters:
  KeyPairName:
    Description: Name of an existing EC2 KeyPair to enable SSH access
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair

  MyIP:
    Description: Your IP address for SSH access (x.x.x.x/32)
    Type: String
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/32
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/32

Resources:
  # Bastion VPC Configuration (formerly VPC1)
  BastionVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: vpc-bastion

  BastionPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BastionVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: vpc-bastion-public-subnet

  BastionIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: vpc-bastion-igw

  BastionIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref BastionVPC
      InternetGatewayId: !Ref BastionIGW

  BastionPublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref BastionVPC
      Tags:
        - Key: Name
          Value: vpc-bastion-public-rt

  BastionPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: BastionIGWAttachment
    Properties:
      RouteTableId: !Ref BastionPublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref BastionIGW

  BastionPublicSubnetRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref BastionPublicSubnet
      RouteTableId: !Ref BastionPublicRT

  # Application VPC Configuration (formerly VPC2)
  AppVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.16.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: vpc-app

  AppPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AppVPC
      CidrBlock: 172.16.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: vpc-app-private-subnet

  AppPrivateRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AppVPC
      Tags:
        - Key: Name
          Value: vpc-app-private-rt

  AppPrivateSubnetRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AppPrivateSubnet
      RouteTableId: !Ref AppPrivateRT

  # VPC Peering Configuration
  VPCPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      VpcId: !Ref BastionVPC
      PeerVpcId: !Ref AppVPC
      Tags:
        - Key: Name
          Value: bastion-app-peering

  # Update route tables for VPC peering
  BastionPeeringRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref BastionPublicRT
      DestinationCidrBlock: 172.16.0.0/16
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  AppPeeringRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref AppPrivateRT
      DestinationCidrBlock: 10.0.0.0/16
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  # Security Groups
  BastionEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Bastion EC2
      VpcId: !Ref BastionVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MyIP
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 172.16.0.0/16
      Tags:
        - Key: Name
          Value: sg-bastion-host

  AppEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for App EC2
      VpcId: !Ref AppVPC
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: sg-app-server

  # EC2 Instances
  BastionEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0440d3b780d96b29d  # Amazon Linux 2023 AMI (update as needed)
      KeyName: !Ref KeyPairName
      SubnetId: !Ref BastionPublicSubnet
      SecurityGroupIds: 
        - !Ref BastionEC2SecurityGroup
      Tags:
        - Key: Name
          Value: bastion-host

  AppEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0440d3b780d96b29d  # Amazon Linux 2023 AMI (update as needed)
      KeyName: !Ref KeyPairName
      SubnetId: !Ref AppPrivateSubnet
      SecurityGroupIds: 
        - !Ref AppEC2SecurityGroup
      Tags:
        - Key: Name
          Value: app-server

Outputs:
  BastionPublicIP:
    Description: Public IP of Bastion Host
    Value: !GetAtt BastionEC2Instance.PublicIp

  AppServerPrivateIP:
    Description: Private IP of Application Server
    Value: !GetAtt AppEC2Instance.PrivateIp

  BastionVPCID:
    Description: Bastion VPC ID
    Value: !Ref BastionVPC

  AppVPCID:
    Description: Application VPC ID
    Value: !Ref AppVPC

  PeeringConnectionID:
    Description: VPC Peering Connection ID
    Value: !Ref VPCPeeringConnection
